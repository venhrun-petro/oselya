"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _immutable = require("immutable");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _ToolbarButton = _interopRequireDefault(require("./ToolbarButton"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ToolbarContainer = (0, _styledBase.default)("div", {
  target: "e169jtoy0",
  label: "ToolbarContainer"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";border-top-right-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";position:relative;display:flex;justify-content:space-between;align-items:center;padding:11px 14px;min-height:58px;transition:background-color ", _netlifyCmsUiDefault.transitions.main, ",color ", _netlifyCmsUiDefault.transitions.main, ";color:", _netlifyCmsUiDefault.colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQm1DIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQge1xuICBUb2dnbGUsXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBsZW5ndGhzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBUb29sYmFyQnV0dG9uIGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAxMXB4IDE0cHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufSwgY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufTtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgVG9vbGJhclRvZ2dsZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtc2hyaW5rOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbjogMCAxMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkVG9nZ2xlID0gVG9vbGJhclRvZ2dsZS53aXRoQ29tcG9uZW50KFRvZ2dsZSk7XG5cbmNvbnN0IFRvb2xiYXJUb2dnbGVMYWJlbCA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIHdpZHRoOiAke3Byb3BzID0+IChwcm9wcy5vZmZQb3NpdGlvbiA/ICc2MnB4JyA6ICc3MHB4Jyl9O1xuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgIGNzc2BcbiAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBgfTtcbmA7XG5cbmNvbnN0IGhlYWRpbmdPcHRpb25zID0ge1xuICAnaGVhZGluZy1vbmUnOiAnSGVhZGluZyAxJyxcbiAgJ2hlYWRpbmctdHdvJzogJ0hlYWRpbmcgMicsXG4gICdoZWFkaW5nLXRocmVlJzogJ0hlYWRpbmcgMycsXG4gICdoZWFkaW5nLWZvdXInOiAnSGVhZGluZyA0JyxcbiAgJ2hlYWRpbmctZml2ZSc6ICdIZWFkaW5nIDUnLFxuICAnaGVhZGluZy1zaXgnOiAnSGVhZGluZyA2Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGJ1dHRvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LFxuICAgIG9uVG9nZ2xlTW9kZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByYXdNb2RlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwbHVnaW5zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uTWFya0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkJsb2NrQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTGlua0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3Rpb25IYXNNYXJrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3Rpb25IYXNCbG9jazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0aW9uSGFzTGluazogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgaXNIaWRkZW4gPSBidXR0b24gPT4ge1xuICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gTGlzdC5pc0xpc3QoYnV0dG9ucykgPyAhYnV0dG9ucy5pbmNsdWRlcyhidXR0b24pIDogZmFsc2U7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uTWFya0NsaWNrLFxuICAgICAgb25CbG9ja0NsaWNrLFxuICAgICAgb25MaW5rQ2xpY2ssXG4gICAgICBzZWxlY3Rpb25IYXNNYXJrLFxuICAgICAgc2VsZWN0aW9uSGFzQmxvY2ssXG4gICAgICBzZWxlY3Rpb25IYXNMaW5rLFxuICAgICAgb25Ub2dnbGVNb2RlLFxuICAgICAgcmF3TW9kZSxcbiAgICAgIHBsdWdpbnMsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIG9uU3VibWl0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYm9sZFwiXG4gICAgICAgICAgICBsYWJlbD1cIkJvbGRcIlxuICAgICAgICAgICAgaWNvbj1cImJvbGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25NYXJrQ2xpY2t9XG4gICAgICAgICAgICBpc0FjdGl2ZT17c2VsZWN0aW9uSGFzTWFya31cbiAgICAgICAgICAgIGlzSGlkZGVuPXt0aGlzLmlzSGlkZGVuKCdib2xkJyl9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cIml0YWxpY1wiXG4gICAgICAgICAgICBsYWJlbD1cIkl0YWxpY1wiXG4gICAgICAgICAgICBpY29uPVwiaXRhbGljXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uTWFya0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc01hcmt9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbignaXRhbGljJyl9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImNvZGVcIlxuICAgICAgICAgICAgbGFiZWw9XCJDb2RlXCJcbiAgICAgICAgICAgIGljb249XCJjb2RlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uTWFya0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc01hcmt9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbignY29kZScpfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTGlua1wiXG4gICAgICAgICAgICBpY29uPVwibGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkxpbmtDbGlja31cbiAgICAgICAgICAgIGlzQWN0aXZlPXtzZWxlY3Rpb25IYXNMaW5rfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2xpbmsnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHsvKiBTaG93IGRyb3Bkb3duIGlmIGF0IGxlYXN0IG9uZSBoZWFkaW5nIGlzIG5vdCBoaWRkZW4gKi99XG4gICAgICAgICAge09iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5zb21lKG9wdGlvbktleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNIaWRkZW4ob3B0aW9uS2V5KTtcbiAgICAgICAgICB9KSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duV3JhcHBlcj5cbiAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzZweFwiXG4gICAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImhlYWRpbmdzXCJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkhlYWRpbmdzXCJcbiAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiaE9wdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGVhZGluZ09wdGlvbnMpLnNvbWUob3B0aW9uS2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkhhc0Jsb2NrKG9wdGlvbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHshZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChvcHRpb25LZXksIGlkeCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5pc0hpZGRlbihvcHRpb25LZXkpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtoZWFkaW5nT3B0aW9uc1tvcHRpb25LZXldfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NlbGVjdGlvbkhhc0Jsb2NrKG9wdGlvbktleSkgJiYgJ2FjdGl2ZSd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQmxvY2tDbGljayh1bmRlZmluZWQsIG9wdGlvbktleSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJxdW90ZVwiXG4gICAgICAgICAgICBsYWJlbD1cIlF1b3RlXCJcbiAgICAgICAgICAgIGljb249XCJxdW90ZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkJsb2NrQ2xpY2t9XG4gICAgICAgICAgICBpc0FjdGl2ZT17c2VsZWN0aW9uSGFzQmxvY2t9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbigncXVvdGUnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiY29kZVwiXG4gICAgICAgICAgICBsYWJlbD1cIkNvZGUgQmxvY2tcIlxuICAgICAgICAgICAgaWNvbj1cImNvZGUtYmxvY2tcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2NvZGUtYmxvY2snKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnVsbGV0ZWQtbGlzdFwiXG4gICAgICAgICAgICBsYWJlbD1cIkJ1bGxldGVkIExpc3RcIlxuICAgICAgICAgICAgaWNvbj1cImxpc3QtYnVsbGV0ZWRcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2J1bGxldGVkLWxpc3QnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyZWQtbGlzdFwiXG4gICAgICAgICAgICBsYWJlbD1cIk51bWJlcmVkIExpc3RcIlxuICAgICAgICAgICAgaWNvbj1cImxpc3QtbnVtYmVyZWRcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ251bWJlcmVkLWxpc3QnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjM2cHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkFkZCBDb21wb25lbnRcIlxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkLXdpdGhcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbXBvbmVudHNNZW51VG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbHVnaW5zICYmXG4gICAgICAgICAgICAgICAgcGx1Z2luc1xuICAgICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgICAubWFwKChwbHVnaW4sIGlkeCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3BsdWdpbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25TdWJtaXQocGx1Z2luLmdldCgnaWQnKSl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFRvb2xiYXJUb2dnbGU+XG4gICAgICAgICAgPFRvb2xiYXJUb2dnbGVMYWJlbCBpc0FjdGl2ZT17IXJhd01vZGV9IG9mZlBvc2l0aW9uPlxuICAgICAgICAgICAgUmljaCBUZXh0XG4gICAgICAgICAgPC9Ub29sYmFyVG9nZ2xlTGFiZWw+XG4gICAgICAgICAgPFN0eWxlZFRvZ2dsZSBhY3RpdmU9e3Jhd01vZGV9IG9uQ2hhbmdlPXtvblRvZ2dsZU1vZGV9IC8+XG4gICAgICAgICAgPFRvb2xiYXJUb2dnbGVMYWJlbCBpc0FjdGl2ZT17cmF3TW9kZX0+TWFya2Rvd248L1Rvb2xiYXJUb2dnbGVMYWJlbD5cbiAgICAgICAgPC9Ub29sYmFyVG9nZ2xlPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */"));
const ToolbarDropdownWrapper = (0, _styledBase.default)("div", {
  target: "e169jtoy1",
  label: "ToolbarDropdownWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "b3pn3b",
  styles: "display:inline-block;position:relative;"
} : {
  name: "b3pn3b",
  styles: "display:inline-block;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarToggle = (0, _styledBase.default)("div", {
  target: "e169jtoy2",
  label: "ToolbarToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1xp6irr",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px;"
} : {
  name: "1xp6irr",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledToggle = ToolbarToggle.withComponent(_netlifyCmsUiDefault.Toggle, {
  target: "e169jtoy4",
  label: "StyledToggle"
});
const ToolbarToggleLabel = (0, _styledBase.default)("span", {
  target: "e169jtoy3",
  label: "ToolbarToggleLabel"
})("display:inline-block;text-align:center;white-space:nowrap;line-height:20px;width:", props => props.offPosition ? '62px' : '70px', ";", props => props.isActive &&
/*#__PURE__*/
(0, _core.css)("font-weight:600;color:", _netlifyCmsUiDefault.colors.active, ";;label:ToolbarToggleLabel;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2Q3NDIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9NYXJrZG93bkNvbnRyb2wvVG9vbGJhci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQge1xuICBUb2dnbGUsXG4gIERyb3Bkb3duLFxuICBEcm9wZG93bkl0ZW0sXG4gIERyb3Bkb3duQnV0dG9uLFxuICBjb2xvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBsZW5ndGhzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBUb29sYmFyQnV0dG9uIGZyb20gJy4vVG9vbGJhckJ1dHRvbic7XG5cbmNvbnN0IFRvb2xiYXJDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiAxMXB4IDE0cHg7XG4gIG1pbi1oZWlnaHQ6IDU4cHg7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufSwgY29sb3IgJHt0cmFuc2l0aW9ucy5tYWlufTtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgVG9vbGJhckRyb3Bkb3duV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuYDtcblxuY29uc3QgVG9vbGJhclRvZ2dsZSA9IHN0eWxlZC5kaXZgXG4gIGZsZXgtc2hyaW5rOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbjogMCAxMHB4O1xuYDtcblxuY29uc3QgU3R5bGVkVG9nZ2xlID0gVG9vbGJhclRvZ2dsZS53aXRoQ29tcG9uZW50KFRvZ2dsZSk7XG5cbmNvbnN0IFRvb2xiYXJUb2dnbGVMYWJlbCA9IHN0eWxlZC5zcGFuYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG4gIHdpZHRoOiAke3Byb3BzID0+IChwcm9wcy5vZmZQb3NpdGlvbiA/ICc2MnB4JyA6ICc3MHB4Jyl9O1xuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5pc0FjdGl2ZSAmJlxuICAgIGNzc2BcbiAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgICBgfTtcbmA7XG5cbmNvbnN0IGhlYWRpbmdPcHRpb25zID0ge1xuICAnaGVhZGluZy1vbmUnOiAnSGVhZGluZyAxJyxcbiAgJ2hlYWRpbmctdHdvJzogJ0hlYWRpbmcgMicsXG4gICdoZWFkaW5nLXRocmVlJzogJ0hlYWRpbmcgMycsXG4gICdoZWFkaW5nLWZvdXInOiAnSGVhZGluZyA0JyxcbiAgJ2hlYWRpbmctZml2ZSc6ICdIZWFkaW5nIDUnLFxuICAnaGVhZGluZy1zaXgnOiAnSGVhZGluZyA2Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvb2xiYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGJ1dHRvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LFxuICAgIG9uVG9nZ2xlTW9kZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICByYXdNb2RlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwbHVnaW5zOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIG9uU3VibWl0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkFkZEFzc2V0OiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uTWFya0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkJsb2NrQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTGlua0NsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3Rpb25IYXNNYXJrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3Rpb25IYXNCbG9jazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2VsZWN0aW9uSGFzTGluazogUHJvcFR5cGVzLmZ1bmMsXG4gIH07XG5cbiAgaXNIaWRkZW4gPSBidXR0b24gPT4ge1xuICAgIGNvbnN0IHsgYnV0dG9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gTGlzdC5pc0xpc3QoYnV0dG9ucykgPyAhYnV0dG9ucy5pbmNsdWRlcyhidXR0b24pIDogZmFsc2U7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9uTWFya0NsaWNrLFxuICAgICAgb25CbG9ja0NsaWNrLFxuICAgICAgb25MaW5rQ2xpY2ssXG4gICAgICBzZWxlY3Rpb25IYXNNYXJrLFxuICAgICAgc2VsZWN0aW9uSGFzQmxvY2ssXG4gICAgICBzZWxlY3Rpb25IYXNMaW5rLFxuICAgICAgb25Ub2dnbGVNb2RlLFxuICAgICAgcmF3TW9kZSxcbiAgICAgIHBsdWdpbnMsXG4gICAgICBkaXNhYmxlZCxcbiAgICAgIG9uU3VibWl0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb29sYmFyQ29udGFpbmVyPlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYm9sZFwiXG4gICAgICAgICAgICBsYWJlbD1cIkJvbGRcIlxuICAgICAgICAgICAgaWNvbj1cImJvbGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25NYXJrQ2xpY2t9XG4gICAgICAgICAgICBpc0FjdGl2ZT17c2VsZWN0aW9uSGFzTWFya31cbiAgICAgICAgICAgIGlzSGlkZGVuPXt0aGlzLmlzSGlkZGVuKCdib2xkJyl9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cIml0YWxpY1wiXG4gICAgICAgICAgICBsYWJlbD1cIkl0YWxpY1wiXG4gICAgICAgICAgICBpY29uPVwiaXRhbGljXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uTWFya0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc01hcmt9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbignaXRhbGljJyl9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImNvZGVcIlxuICAgICAgICAgICAgbGFiZWw9XCJDb2RlXCJcbiAgICAgICAgICAgIGljb249XCJjb2RlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e29uTWFya0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc01hcmt9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbignY29kZScpfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJsaW5rXCJcbiAgICAgICAgICAgIGxhYmVsPVwiTGlua1wiXG4gICAgICAgICAgICBpY29uPVwibGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkxpbmtDbGlja31cbiAgICAgICAgICAgIGlzQWN0aXZlPXtzZWxlY3Rpb25IYXNMaW5rfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2xpbmsnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHsvKiBTaG93IGRyb3Bkb3duIGlmIGF0IGxlYXN0IG9uZSBoZWFkaW5nIGlzIG5vdCBoaWRkZW4gKi99XG4gICAgICAgICAge09iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5zb21lKG9wdGlvbktleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNIaWRkZW4ob3B0aW9uS2V5KTtcbiAgICAgICAgICB9KSAmJiAoXG4gICAgICAgICAgICA8VG9vbGJhckRyb3Bkb3duV3JhcHBlcj5cbiAgICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzZweFwiXG4gICAgICAgICAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImhlYWRpbmdzXCJcbiAgICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkhlYWRpbmdzXCJcbiAgICAgICAgICAgICAgICAgICAgICBpY29uPVwiaE9wdGlvbnNcIlxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17KCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaGVhZGluZ09wdGlvbnMpLnNvbWUob3B0aW9uS2V5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkhhc0Jsb2NrKG9wdGlvbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHshZGlzYWJsZWQgJiZcbiAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlYWRpbmdPcHRpb25zKS5tYXAoXG4gICAgICAgICAgICAgICAgICAgIChvcHRpb25LZXksIGlkeCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5pc0hpZGRlbihvcHRpb25LZXkpICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtoZWFkaW5nT3B0aW9uc1tvcHRpb25LZXldfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NlbGVjdGlvbkhhc0Jsb2NrKG9wdGlvbktleSkgJiYgJ2FjdGl2ZSd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQmxvY2tDbGljayh1bmRlZmluZWQsIG9wdGlvbktleSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICl9XG4gICAgICAgICAgPFRvb2xiYXJCdXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJxdW90ZVwiXG4gICAgICAgICAgICBsYWJlbD1cIlF1b3RlXCJcbiAgICAgICAgICAgIGljb249XCJxdW90ZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvbkJsb2NrQ2xpY2t9XG4gICAgICAgICAgICBpc0FjdGl2ZT17c2VsZWN0aW9uSGFzQmxvY2t9XG4gICAgICAgICAgICBpc0hpZGRlbj17dGhpcy5pc0hpZGRlbigncXVvdGUnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiY29kZVwiXG4gICAgICAgICAgICBsYWJlbD1cIkNvZGUgQmxvY2tcIlxuICAgICAgICAgICAgaWNvbj1cImNvZGUtYmxvY2tcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2NvZGUtYmxvY2snKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnVsbGV0ZWQtbGlzdFwiXG4gICAgICAgICAgICBsYWJlbD1cIkJ1bGxldGVkIExpc3RcIlxuICAgICAgICAgICAgaWNvbj1cImxpc3QtYnVsbGV0ZWRcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ2J1bGxldGVkLWxpc3QnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyQnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwibnVtYmVyZWQtbGlzdFwiXG4gICAgICAgICAgICBsYWJlbD1cIk51bWJlcmVkIExpc3RcIlxuICAgICAgICAgICAgaWNvbj1cImxpc3QtbnVtYmVyZWRcIlxuICAgICAgICAgICAgb25DbGljaz17b25CbG9ja0NsaWNrfVxuICAgICAgICAgICAgaXNBY3RpdmU9e3NlbGVjdGlvbkhhc0Jsb2NrfVxuICAgICAgICAgICAgaXNIaWRkZW49e3RoaXMuaXNIaWRkZW4oJ251bWJlcmVkLWxpc3QnKX1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUb29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICAgICAgPERyb3Bkb3duXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjM2cHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8RHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8VG9vbGJhckJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIkFkZCBDb21wb25lbnRcIlxuICAgICAgICAgICAgICAgICAgICBpY29uPVwiYWRkLXdpdGhcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNvbXBvbmVudHNNZW51VG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvRHJvcGRvd25CdXR0b24+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtwbHVnaW5zICYmXG4gICAgICAgICAgICAgICAgcGx1Z2luc1xuICAgICAgICAgICAgICAgICAgLnRvTGlzdCgpXG4gICAgICAgICAgICAgICAgICAubWFwKChwbHVnaW4sIGlkeCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e3BsdWdpbi5nZXQoJ2xhYmVsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25TdWJtaXQocGx1Z2luLmdldCgnaWQnKSl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgICAgPC9Ub29sYmFyRHJvcGRvd25XcmFwcGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPFRvb2xiYXJUb2dnbGU+XG4gICAgICAgICAgPFRvb2xiYXJUb2dnbGVMYWJlbCBpc0FjdGl2ZT17IXJhd01vZGV9IG9mZlBvc2l0aW9uPlxuICAgICAgICAgICAgUmljaCBUZXh0XG4gICAgICAgICAgPC9Ub29sYmFyVG9nZ2xlTGFiZWw+XG4gICAgICAgICAgPFN0eWxlZFRvZ2dsZSBhY3RpdmU9e3Jhd01vZGV9IG9uQ2hhbmdlPXtvblRvZ2dsZU1vZGV9IC8+XG4gICAgICAgICAgPFRvb2xiYXJUb2dnbGVMYWJlbCBpc0FjdGl2ZT17cmF3TW9kZX0+TWFya2Rvd248L1Rvb2xiYXJUb2dnbGVMYWJlbD5cbiAgICAgICAgPC9Ub29sYmFyVG9nZ2xlPlxuICAgICAgPC9Ub29sYmFyQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */"));
const headingOptions = {
  'heading-one': 'Heading 1',
  'heading-two': 'Heading 2',
  'heading-three': 'Heading 3',
  'heading-four': 'Heading 4',
  'heading-five': 'Heading 5',
  'heading-six': 'Heading 6'
};

class Toolbar extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "isHidden", button => {
      const {
        buttons
      } = this.props;
      return _immutable.List.isList(buttons) ? !buttons.includes(button) : false;
    });
  }

  render() {
    const {
      onMarkClick,
      onBlockClick,
      onLinkClick,
      selectionHasMark,
      selectionHasBlock,
      selectionHasLink,
      onToggleMode,
      rawMode,
      plugins,
      disabled,
      onSubmit
    } = this.props;
    return _react.default.createElement(ToolbarContainer, null, _react.default.createElement("div", null, _react.default.createElement(_ToolbarButton.default, {
      type: "bold",
      label: "Bold",
      icon: "bold",
      onClick: onMarkClick,
      isActive: selectionHasMark,
      isHidden: this.isHidden('bold'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "italic",
      label: "Italic",
      icon: "italic",
      onClick: onMarkClick,
      isActive: selectionHasMark,
      isHidden: this.isHidden('italic'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "code",
      label: "Code",
      icon: "code",
      onClick: onMarkClick,
      isActive: selectionHasMark,
      isHidden: this.isHidden('code'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "link",
      label: "Link",
      icon: "link",
      onClick: onLinkClick,
      isActive: selectionHasLink,
      isHidden: this.isHidden('link'),
      disabled: disabled
    }), Object.keys(headingOptions).some(optionKey => {
      return !this.isHidden(optionKey);
    }) && _react.default.createElement(ToolbarDropdownWrapper, null, _react.default.createElement(_netlifyCmsUiDefault.Dropdown, {
      dropdownTopOverlap: "36px",
      renderButton: () => _react.default.createElement(_netlifyCmsUiDefault.DropdownButton, null, _react.default.createElement(_ToolbarButton.default, {
        type: "headings",
        label: "Headings",
        icon: "hOptions",
        disabled: disabled,
        isActive: () => !disabled && Object.keys(headingOptions).some(optionKey => {
          return selectionHasBlock(optionKey);
        })
      }))
    }, !disabled && Object.keys(headingOptions).map((optionKey, idx) => !this.isHidden(optionKey) && _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
      key: idx,
      label: headingOptions[optionKey],
      className: selectionHasBlock(optionKey) && 'active',
      onClick: () => onBlockClick(undefined, optionKey)
    })))), _react.default.createElement(_ToolbarButton.default, {
      type: "quote",
      label: "Quote",
      icon: "quote",
      onClick: onBlockClick,
      isActive: selectionHasBlock,
      isHidden: this.isHidden('quote'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "code",
      label: "Code Block",
      icon: "code-block",
      onClick: onBlockClick,
      isActive: selectionHasBlock,
      isHidden: this.isHidden('code-block'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "bulleted-list",
      label: "Bulleted List",
      icon: "list-bulleted",
      onClick: onBlockClick,
      isActive: selectionHasBlock,
      isHidden: this.isHidden('bulleted-list'),
      disabled: disabled
    }), _react.default.createElement(_ToolbarButton.default, {
      type: "numbered-list",
      label: "Numbered List",
      icon: "list-numbered",
      onClick: onBlockClick,
      isActive: selectionHasBlock,
      isHidden: this.isHidden('numbered-list'),
      disabled: disabled
    }), _react.default.createElement(ToolbarDropdownWrapper, null, _react.default.createElement(_netlifyCmsUiDefault.Dropdown, {
      dropdownTopOverlap: "36px",
      renderButton: () => _react.default.createElement(_netlifyCmsUiDefault.DropdownButton, null, _react.default.createElement(_ToolbarButton.default, {
        label: "Add Component",
        icon: "add-with",
        onClick: this.handleComponentsMenuToggle,
        disabled: disabled
      }))
    }, plugins && plugins.toList().map((plugin, idx) => _react.default.createElement(_netlifyCmsUiDefault.DropdownItem, {
      key: idx,
      label: plugin.get('label'),
      onClick: () => onSubmit(plugin.get('id'))
    }))))), _react.default.createElement(ToolbarToggle, null, _react.default.createElement(ToolbarToggleLabel, {
      isActive: !rawMode,
      offPosition: true
    }, "Rich Text"), _react.default.createElement(StyledToggle, {
      active: rawMode,
      onChange: onToggleMode
    }), _react.default.createElement(ToolbarToggleLabel, {
      isActive: rawMode
    }, "Markdown")));
  }

}

exports.default = Toolbar;

_defineProperty(Toolbar, "propTypes", {
  buttons: _reactImmutableProptypes.default.list,
  onToggleMode: _propTypes.default.func.isRequired,
  rawMode: _propTypes.default.bool,
  plugins: _reactImmutableProptypes.default.map,
  onSubmit: _propTypes.default.func,
  onAddAsset: _propTypes.default.func,
  getAsset: _propTypes.default.func,
  disabled: _propTypes.default.bool,
  onMarkClick: _propTypes.default.func,
  onBlockClick: _propTypes.default.func,
  onLinkClick: _propTypes.default.func,
  selectionHasMark: _propTypes.default.func,
  selectionHasBlock: _propTypes.default.func,
  selectionHasLink: _propTypes.default.func
});